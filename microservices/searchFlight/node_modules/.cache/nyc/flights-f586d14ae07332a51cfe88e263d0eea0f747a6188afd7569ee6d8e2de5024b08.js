function cov_2pq9vl3l2k(){var path="C:\\Users\\Surbhi bhor\\Desktop\\Case study\\microservices\\searchFlight\\flights.js";var hash="6f061aabb2f59280d172e4f34906c4953d04af1f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Surbhi bhor\\Desktop\\Case study\\microservices\\searchFlight\\flights.js",statementMap:{"0":{start:{line:2,column:16},end:{line:2,column:34}},"1":{start:{line:3,column:12},end:{line:3,column:21}},"2":{start:{line:4,column:19},end:{line:4,column:41}},"3":{start:{line:5,column:0},end:{line:5,column:27}},"4":{start:{line:8,column:21},end:{line:8,column:45}},"5":{start:{line:9,column:18},end:{line:9,column:47}},"6":{start:{line:12,column:13},end:{line:12,column:28}},"7":{start:{line:13,column:0},end:{line:13,column:49}},"8":{start:{line:15,column:17},end:{line:15,column:36}},"9":{start:{line:18,column:0},end:{line:20,column:33}},"10":{start:{line:19,column:11},end:{line:19,column:47}},"11":{start:{line:20,column:15},end:{line:20,column:31}},"12":{start:{line:22,column:0},end:{line:22,column:20}},"13":{start:{line:23,column:15},end:{line:23,column:39}},"14":{start:{line:30,column:23},end:{line:44,column:3}},"15":{start:{line:46,column:22},end:{line:46,column:50}},"16":{start:{line:47,column:2},end:{line:47,column:72}},"17":{start:{line:49,column:2},end:{line:49,column:26}},"18":{start:{line:82,column:0},end:{line:84,column:2}},"19":{start:{line:83,column:4},end:{line:83,column:39}},"20":{start:{line:109,column:0},end:{line:130,column:2}},"21":{start:{line:110,column:20},end:{line:116,column:5}},"22":{start:{line:119,column:17},end:{line:119,column:38}},"23":{start:{line:120,column:4},end:{line:128,column:6}},"24":{start:{line:121,column:8},end:{line:121,column:40}},"25":{start:{line:122,column:8},end:{line:122,column:34}},"26":{start:{line:125,column:8},end:{line:127,column:9}},"27":{start:{line:126,column:12},end:{line:126,column:22}},"28":{start:{line:147,column:0},end:{line:152,column:2}},"29":{start:{line:148,column:4},end:{line:151,column:6}},"30":{start:{line:149,column:8},end:{line:149,column:25}},"31":{start:{line:177,column:0},end:{line:191,column:3}},"32":{start:{line:178,column:4},end:{line:185,column:6}},"33":{start:{line:179,column:8},end:{line:184,column:9}},"34":{start:{line:180,column:12},end:{line:180,column:29}},"35":{start:{line:183,column:12},end:{line:183,column:32}},"36":{start:{line:218,column:0},end:{line:232,column:3}},"37":{start:{line:219,column:4},end:{line:226,column:6}},"38":{start:{line:220,column:8},end:{line:225,column:9}},"39":{start:{line:221,column:12},end:{line:221,column:29}},"40":{start:{line:224,column:12},end:{line:224,column:32}},"41":{start:{line:266,column:0},end:{line:281,column:3}},"42":{start:{line:267,column:17},end:{line:267,column:48}},"43":{start:{line:268,column:22},end:{line:268,column:58}},"44":{start:{line:270,column:4},end:{line:275,column:6}},"45":{start:{line:272,column:12},end:{line:272,column:29}},"46":{start:{line:273,column:12},end:{line:273,column:32}},"47":{start:{line:307,column:0},end:{line:319,column:5}},"48":{start:{line:308,column:4},end:{line:313,column:6}},"49":{start:{line:309,column:8},end:{line:309,column:26}},"50":{start:{line:310,column:8},end:{line:310,column:40}},"51":{start:{line:353,column:0},end:{line:372,column:5}},"52":{start:{line:354,column:20},end:{line:360,column:5}},"53":{start:{line:361,column:4},end:{line:366,column:6}},"54":{start:{line:363,column:6},end:{line:363,column:36}},"55":{start:{line:365,column:2},end:{line:365,column:26}},"56":{start:{line:376,column:0},end:{line:378,column:2}},"57":{start:{line:377,column:4},end:{line:377,column:68}},"58":{start:{line:380,column:0},end:{line:380,column:19}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:6},end:{line:19,column:7}},loc:{start:{line:19,column:11},end:{line:19,column:47}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:7},end:{line:20,column:8}},loc:{start:{line:20,column:15},end:{line:20,column:31}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:82,column:13},end:{line:82,column:14}},loc:{start:{line:82,column:24},end:{line:84,column:1}},line:82},"3":{name:"(anonymous_3)",decl:{start:{line:109,column:20},end:{line:109,column:21}},loc:{start:{line:109,column:32},end:{line:130,column:1}},line:109},"4":{name:"(anonymous_4)",decl:{start:{line:120,column:23},end:{line:120,column:24}},loc:{start:{line:120,column:32},end:{line:124,column:5}},line:120},"5":{name:"(anonymous_5)",decl:{start:{line:124,column:14},end:{line:124,column:15}},loc:{start:{line:124,column:23},end:{line:128,column:5}},line:124},"6":{name:"(anonymous_6)",decl:{start:{line:147,column:20},end:{line:147,column:21}},loc:{start:{line:147,column:32},end:{line:152,column:1}},line:147},"7":{name:"(anonymous_7)",decl:{start:{line:148,column:23},end:{line:148,column:24}},loc:{start:{line:148,column:34},end:{line:151,column:5}},line:148},"8":{name:"(anonymous_8)",decl:{start:{line:177,column:34},end:{line:177,column:35}},loc:{start:{line:177,column:47},end:{line:191,column:1}},line:177},"9":{name:"(anonymous_9)",decl:{start:{line:178,column:61},end:{line:178,column:62}},loc:{start:{line:178,column:72},end:{line:185,column:5}},line:178},"10":{name:"(anonymous_10)",decl:{start:{line:218,column:22},end:{line:218,column:23}},loc:{start:{line:218,column:35},end:{line:232,column:1}},line:218},"11":{name:"(anonymous_11)",decl:{start:{line:219,column:41},end:{line:219,column:42}},loc:{start:{line:219,column:52},end:{line:226,column:5}},line:219},"12":{name:"(anonymous_12)",decl:{start:{line:266,column:39},end:{line:266,column:40}},loc:{start:{line:266,column:52},end:{line:281,column:1}},line:266},"13":{name:"(anonymous_13)",decl:{start:{line:270,column:65},end:{line:270,column:66}},loc:{start:{line:270,column:76},end:{line:275,column:5}},line:270},"14":{name:"(anonymous_14)",decl:{start:{line:307,column:34},end:{line:307,column:35}},loc:{start:{line:307,column:48},end:{line:319,column:3}},line:307},"15":{name:"(anonymous_15)",decl:{start:{line:308,column:70},end:{line:308,column:71}},loc:{start:{line:308,column:84},end:{line:313,column:5}},line:308},"16":{name:"(anonymous_16)",decl:{start:{line:353,column:23},end:{line:353,column:24}},loc:{start:{line:353,column:37},end:{line:372,column:3}},line:353},"17":{name:"(anonymous_17)",decl:{start:{line:362,column:45},end:{line:362,column:46}},loc:{start:{line:362,column:59},end:{line:366,column:5}},line:362},"18":{name:"(anonymous_18)",decl:{start:{line:376,column:17},end:{line:376,column:18}},loc:{start:{line:376,column:23},end:{line:378,column:1}},line:376}},branchMap:{"0":{loc:{start:{line:125,column:8},end:{line:127,column:9}},type:"if",locations:[{start:{line:125,column:8},end:{line:127,column:9}},{start:{line:125,column:8},end:{line:127,column:9}}],line:125},"1":{loc:{start:{line:179,column:8},end:{line:184,column:9}},type:"if",locations:[{start:{line:179,column:8},end:{line:184,column:9}},{start:{line:179,column:8},end:{line:184,column:9}}],line:179},"2":{loc:{start:{line:220,column:8},end:{line:225,column:9}},type:"if",locations:[{start:{line:220,column:8},end:{line:225,column:9}},{start:{line:220,column:8},end:{line:225,column:9}}],line:220}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6f061aabb2f59280d172e4f34906c4953d04af1f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2pq9vl3l2k=function(){return actualCoverage;};}return actualCoverage;}cov_2pq9vl3l2k();//load express
const express=(cov_2pq9vl3l2k().s[0]++,require("express"));const app=(cov_2pq9vl3l2k().s[1]++,express());const bodyParser=(cov_2pq9vl3l2k().s[2]++,require("body-parser"));cov_2pq9vl3l2k().s[3]++;app.use(bodyParser.json());//load swagger
const swaggerJsDoc=(cov_2pq9vl3l2k().s[4]++,require("swagger-jsdoc"));const swaggerUi=(cov_2pq9vl3l2k().s[5]++,require("swagger-ui-express"));//load cors
const cors=(cov_2pq9vl3l2k().s[6]++,require('cors'));cov_2pq9vl3l2k().s[7]++;app.use(cors({origin:'http://localhost:4200'}));//load mongoose
const mongoose=(cov_2pq9vl3l2k().s[8]++,require("mongoose"));//---------------------------------------------------------------------------------------------------------------------------------------------
//connect to database
cov_2pq9vl3l2k().s[9]++;mongoose.connect("mongodb+srv://surbhi:12345@flight.paxk2.mongodb.net/flightData",{useNewUrlParser:true,useUnifiedTopology:true}).then(()=>{cov_2pq9vl3l2k().f[0]++;cov_2pq9vl3l2k().s[10]++;return console.log("Connected to database");}).catch(err=>{cov_2pq9vl3l2k().f[1]++;cov_2pq9vl3l2k().s[11]++;return console.log(err);});//load its model
cov_2pq9vl3l2k().s[12]++;require("./Flight");const Flight=(cov_2pq9vl3l2k().s[13]++,mongoose.model("Flight"));//---------------------------------------------------------------------------------------------------------------------------------------------
//         SWAGGER DOCUMENTATION
// Extended: https://swagger.io/specification/#infoObject
const swaggerOptions=(cov_2pq9vl3l2k().s[14]++,{swaggerDefinition:{info:{version:"1.0.0",title:"Flight API",description:"Flight API Information",contact:{name:"Surbhi"},servers:["http://localhost:4545"]}},// ['.routes/*.js']
apis:["flights.js"]});const swaggerDocs=(cov_2pq9vl3l2k().s[15]++,swaggerJsDoc(swaggerOptions));cov_2pq9vl3l2k().s[16]++;app.use("/api-flight",swaggerUi.serve,swaggerUi.setup(swaggerDocs));cov_2pq9vl3l2k().s[17]++;app.use(express.json());/**
 * @swagger
 * definitions:
 *  Flight:
 *   type: object
 *   properties:
 *    flightCode:
 *      type: string
 *      description: code of the flight
 *      example: 'SC101'
 *    airline:
 *      type: string
 *      description: name of the airline
 *      example: 'SpiceJet'
 *    source:
 *      type: string
 *      description: source
 *      example: 'mumbai'
 *    destination:
 *      type: string
 *      description: Destination
 *      example: 'delhi'
 *    fare:
 *      type: number
 *      description: fare of the flight
 *      example: 2000
 *    
 */ //---------------------------------------------------------------------------------------------------------------------------------------------
//render home page
cov_2pq9vl3l2k().s[18]++;app.get('/',(req,res)=>{cov_2pq9vl3l2k().f[2]++;cov_2pq9vl3l2k().s[19]++;res.send("This is search service");});//---------------------------------------------------------------------------------------------------------------------------------------------
// 1] create functionality
/**
 * @swagger
 * /flight:
 *   post:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Successfully created
 */cov_2pq9vl3l2k().s[20]++;app.post("/flight",(req,res)=>{cov_2pq9vl3l2k().f[3]++;var newFlight=(cov_2pq9vl3l2k().s[21]++,{flightCode:req.body.flightCode,airline:req.body.airline,source:req.body.source,destination:req.body.destination,fare:req.body.fare});//create new flight
var flight=(cov_2pq9vl3l2k().s[22]++,new Flight(newFlight));cov_2pq9vl3l2k().s[23]++;flight.save().then(data=>{cov_2pq9vl3l2k().f[4]++;cov_2pq9vl3l2k().s[24]++;console.log("New Flight added");cov_2pq9vl3l2k().s[25]++;res.status(200).send(data);//res.json(data)        
}).catch(err=>{cov_2pq9vl3l2k().f[5]++;cov_2pq9vl3l2k().s[26]++;if(err){cov_2pq9vl3l2k().b[0][0]++;cov_2pq9vl3l2k().s[27]++;throw err;}else{cov_2pq9vl3l2k().b[0][1]++;}});//res.send("New flight added successfully")
});//---------------------------------------------------------------------------------------------------------------------------------------------
// 2] RETRIEVE ALL FLIGHTS
/**
 * @swagger
 * /flights:
 *  get:
 *    tags:
 *       - Flights
 *    description: Used to get all flights in database
 *    responses:
 *      '200':
 *        description: Successfully fetched flight
 *      '500':
 *        description: Server error
 */cov_2pq9vl3l2k().s[28]++;app.get("/flights",(req,res)=>{cov_2pq9vl3l2k().f[6]++;cov_2pq9vl3l2k().s[29]++;Flight.find().then(flights=>{cov_2pq9vl3l2k().f[7]++;cov_2pq9vl3l2k().s[30]++;res.json(flights);//console.log(flights);
});});//---------------------------------------------------------------------------------------------------------------------------------------------
// 3] retrieve flight by the code
/**
 * @swagger
 * /flightCode/{flightCode}:
 *  get:
 *    tags:
 *       - Flights
 *    summary: Fetch a flight.
 *    description: Used to fetch a single flight
 *    responses:
 *      '200':
 *        description: Successfully fetched flight
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: flightCode
 *         required: true
 *         schema:
 *           type: String
 *         description: The flight code
 */cov_2pq9vl3l2k().s[31]++;app.get("/flightCode/:flightCode",(req,res)=>{cov_2pq9vl3l2k().f[8]++;cov_2pq9vl3l2k().s[32]++;Flight.findOne({flightCode:req.params.flightCode}).then(flight=>{cov_2pq9vl3l2k().f[9]++;cov_2pq9vl3l2k().s[33]++;if(flight){cov_2pq9vl3l2k().b[1][0]++;cov_2pq9vl3l2k().s[34]++;res.send(flight);}else{cov_2pq9vl3l2k().b[1][1]++;cov_2pq9vl3l2k().s[35]++;res.sendStatus(404);}});// .catch(err =>{
//     if(err){
//         throw err;
//     }
// })
});//---------------------------------------------------------------------------------------------------------------------------------------------
// 4] Retrieve flight by their id 
/**
 * @swagger
 * /flight/{id}:
 *  get:
 *    tags:
 *       - Flights
 *    summary: Fetch a flight.
 *    description: Used to fetch a single flight
 *    responses:
 *      '200':
 *        description: Successfully fetched flight
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: The flight ID
 */cov_2pq9vl3l2k().s[36]++;app.get("/flight/:id",(req,res)=>{cov_2pq9vl3l2k().f[10]++;cov_2pq9vl3l2k().s[37]++;Flight.findById(req.params.id).then(flight=>{cov_2pq9vl3l2k().f[11]++;cov_2pq9vl3l2k().s[38]++;if(flight){cov_2pq9vl3l2k().b[2][0]++;cov_2pq9vl3l2k().s[39]++;res.json(flight);}else{cov_2pq9vl3l2k().b[2][1]++;cov_2pq9vl3l2k().s[40]++;res.sendStatus(404);}});//  .catch(err =>{
//     if(err){
//         throw err;
//     }
// })
});//---------------------------------------------------------------------------------------------------------------------------------------------
// 5] Retrieve flight by source and destination
/**
 * @swagger
 * /flight/{source}/{destination}:
 *  get:
 *    tags:
 *       - Flights
 *    summary: Search flights
 *    description: Used to search flights
 *    responses:
 *      '200':
 *        description: Successfully searched flights
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: source
 *         required: true
 *         schema:
 *           type: String
 *         description: Source
 * 
 *       - in: path
 *         name: destination
 *         required: true
 *         schema:
 *           type: String
 *         description: Destination
 *       
 */cov_2pq9vl3l2k().s[41]++;app.get("/flight/:source/:destination",(req,res)=>{cov_2pq9vl3l2k().f[12]++;let source=(cov_2pq9vl3l2k().s[42]++,req.params.source.toLowerCase());let destination=(cov_2pq9vl3l2k().s[43]++,req.params.destination.toLowerCase());cov_2pq9vl3l2k().s[44]++;Flight.find({source:source,destination:destination}).then(flight=>{cov_2pq9vl3l2k().f[13]++;cov_2pq9vl3l2k().s[45]++;res.json(flight);cov_2pq9vl3l2k().s[46]++;console.log(flight);});//  .catch(err =>{
//     if(err){
//         throw err;
//     }
// })
});//---------------------------------------------------------------------------------------------------------------------------------------------
// 6] removing flights
/**
 * @swagger
 * /flight/{flightCode}:
 *  delete:
 *    tags:
 *       - Flights
 *    summary: Delete a flight.
 *    description: Used to delete a flight
 *    responses:
 *      '200':
 *        description: Successfully deleted flight
 *      '500':
 *        description: Server error
 *  parameters:
 *       - in: path
 *         name: flightCode
 *         required: true
 *         schema:
 *           type: String
 *         description: The flight ID
 */cov_2pq9vl3l2k().s[47]++;app.delete('/flight/:flightCode',(req,res)=>{cov_2pq9vl3l2k().f[14]++;cov_2pq9vl3l2k().s[48]++;Flight.findOneAndRemove({flightCode:req.params.flightCode}).then(response=>{cov_2pq9vl3l2k().f[15]++;cov_2pq9vl3l2k().s[49]++;res.send(response);cov_2pq9vl3l2k().s[50]++;console.log(` flight deleted`);//res.send("Flight removed successfully");
//console.log(flight);
});//  .catch(err => {
//   if(err){
//     throw err;
//   }
// })
});//---------------------------------------------------------------------------------------------------------------------------------------------
// 7]  UPDATING FLIGHT
/**
 * @swagger
 * /flight/{id}:
 *   put:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: flight object id
 *         in: path
 *         required: true
 *         schema:
 *          type: string
 *          description: user's object id
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Flight Successfully updated
 *       400:
 *         description: Server Error
 */cov_2pq9vl3l2k().s[51]++;app.put('/flight/:id',(req,res)=>{cov_2pq9vl3l2k().f[16]++;var newFlight=(cov_2pq9vl3l2k().s[52]++,{airline:req.body.airline,flightCode:req.body.flightCode,source:req.body.source,destination:req.body.destination,fare:req.body.fare});cov_2pq9vl3l2k().s[53]++;Flight.findByIdAndUpdate(req.params.id,{"$set":newFlight},{new:true}).then(response=>{cov_2pq9vl3l2k().f[17]++;cov_2pq9vl3l2k().s[54]++;console.log(`flight updated`);cov_2pq9vl3l2k().s[55]++;res.send(response.data);});//  .catch(err => {
//   if(err){
//     throw err;
//   }
// })
});//---------------------------------------------------------------------------------------------------------------------------------------------
//listen to the port
cov_2pq9vl3l2k().s[56]++;app.listen(4545,()=>{cov_2pq9vl3l2k().f[18]++;cov_2pq9vl3l2k().s[57]++;console.log("Up and running this is our flight search service");});cov_2pq9vl3l2k().s[58]++;module.exports=app;// app.delete('/flight/:id', (req, res) => {
//     Flight.deleteOne({id:req.params.id}).then((response) => {
//       res.send("Flight removed successfully");
//       //console.log(flight);
//     }).catch(err => {
//       if(err){
//         throw err;
//       }
//     })
//   });
//---------------------------------------------------------------------------------------------------------------------------------------------
// 7] Updating flights
// app.put('/flight/:flightCode', (req,res) => {
//     Flight.updateOne({flightCode: req.params.flightCode}, req.body).then((response) => {
//     Flight.findOne({flightCode: req.params.flightCode}).then(function(flight){
//         res.send(flight); 
//     })
//         //res.send("Flight updated successfully");
// }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
// app.put('/flight/:id', (req,res) => {
//     Flight.findByIdAndUpdate( req.params.id).then((response) => {
//          res.send(response.data)
//          console.log("Flight updated sucessfully");
//         //res.send("Flight updated successfully");
// }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,